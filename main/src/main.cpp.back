#include "main.h"

int printControl = 0;

CSMiddleWare::SPData carDataMsg;
cloudProtocol::cloudData cloudDataMsgTest;
double lat = 0.0;
double lon = 0.0;
double gpsAngle = 0.0;
int gpsQF = 0;
double backCompassAngle = 0.0;
double steerAngle = 0.0;
double frontCompassAngle = 0.0;
unsigned int carCounter = 0;
unsigned int preCarCounter = 0;
int block = 0;


int cloudPathValid = 0;

double G_dx;    // 丢失GPS之前小车到下一个目标x方向的距离，对应经度
double G_dy;    // 丢失GPS之前小车到下一个目标y方向的距离，对应纬度
double G_angle; // 丢失GPS之前小车到下一个目标的角度
bool G_lostGps; // 是否丢失GPS
car G_car;      // 当前车辆
int G_carCounter;      // 上一次速度编码器计数	
float G_steer;  // 当前转向角

bool indoorStartUp = true;



int main(int argc, char **argv)
{
	// parameters^
	float minDistance=0.5;	
	float brakeV=500;	
	float gasV=0.5;
	float gasRatio=0.1;  //speed changing rate
	float angleDis=3;  //distance for damping angle
    int brakeDealyTime =3;		
	// parametersV
	G_car.width = 0.5;
    G_car.length = 1.0;
    pthread_t idSerial, idCloud, idBieye;
    // 初始化ROS节点
    ros::init(argc, argv, "main");
 
    // 创建节点句柄
    ros::NodeHandle n;
    ros::NodeHandle *pn = &n;

    // 创建一个Subscriber，订阅名为/gpsread的topic，订阅话题的队列长度10，注册回调函数gpsCallback
    ros::Subscriber gps_sub = n.subscribe("/gpsread", 10, gpsCallback);
    ros::Subscriber carInfo_sub = n.subscribe("/SPRead", 1000, carInfoCallback);
    ros::Subscriber frontphoneInfo_sub = n.subscribe("/TCPRead", 1000, frontphoneInfoCallback);
    ros::Subscriber backphoneInfo_sub = n.subscribe("/TCPReadBack", 1000, backphoneInfoCallback);

    ros::Rate loop_rate(10);

    int ret = pthread_create(&idSerial, NULL, serialCallbackThread, (void*)pn);
    if(ret) {
        ROS_INFO("Create serialPort pthread error!");
        return 1;
    }
    ROS_INFO("Create serialPort pthread success!");

    ret = pthread_create(&idCloud, NULL, cloudCallbackThread, NULL);
    if(ret) {
        ROS_INFO("Create cloud pthread error!");
        return 1;
    }
    ROS_INFO("Create cloud pthread success!");

    ret = pthread_create(&idBieye, NULL, bieyeCallbackThread, NULL);
    if(ret) {
        ROS_INFO("Create bieye pthread error!");
        return 1;
    }
    ROS_INFO("Create bieye pthread success!");

    vector<double> path;
    int pathSize=0;
    int start;
    int pstart=0;
    int stop;
    int pstop=0;
    int tu;
    int go=0;
    double ilat ;
    double ilon ;
    double tlat ;
    double tlon ;
    double igpsangle;
    float pGas=0;
    int targetIndex=0;	
    bool manualMode = false;
    // 用于本地发送路径，只有当patho为0的时候发送一次
    int patho = 0;

    gas(0.0);
    brake(0.0);
    // 为了避免大角度的转向，在开始之前将角度设为0
    G_steer = 0;
	int delayTimes0 = 0;
	while (ros::ok())//转向
	{
	    loop_rate.sleep();
	    delayTimes0++;
	    steer(0.0);//每次1°
	    if(delayTimes0==100)//1s
	    {break;}
	}
   /* steer(0.0);
    delay_1s(1);*/
    
    /***************转向测试 new steer*********************************/
    //int delayTimes1 = 0;
    //printf("start\n");
    //gas(1.0);
    //delay_1s(3);
    //printf("steer15\n");
    //while(ros::ok())//转向
    //{
    //    loop_rate.sleep();
    //    delayTimes1++;
    //    steer(-15.0);//每次1°
    //    if(delayTimes1==300)//3s
    //    {break;}
    //}   
    //printf("gas0\n");
    //gas(0.0);
    //printf("steer0\n");
    //delayTimes1 = 0;
    //while(ros::ok())//回正
    //{
    //    loop_rate.sleep();
    //    delayTimes1++;
    //    steer(0.0);
    //    if(delayTimes1==20)//0.02s
    //    {break;}
    //}
    //brake(brakeV);
    //delay_1s(2);
    //brake(0.0);
    //delay_1s(1);
    //return 0;
    /********************************************双目测试********************************************/
    // while(ros::ok())
    // {
    //     loop_rate.sleep();
    //     ros::spinOnce(); 
    //     printf("bieyeObstacle:%8.4f\n", bieyeObstacle());
    // }
    // return 0;
    /*********************************************end***********************************************/

//     /*******************************************小车控制测试*******************************************/
//     printf("start\n");
//     gas(1.0);
//    // steer(10.0);
//     delay_1s(3);
//     printf("steer-15\n");
//      steer(-15.0);
//     delay_1s(6);
//     gas(0.0);
//     brake(brakeV);
//     steer(0.0);
//     printf("end\n");
//     delay_1s(3);
//     brake(0.0);
//     steer(0.0);
//     delay_1s(1);
//       return 0;
    /*********************************************end***********************************************/

    /*******************************************超声波测试*******************************************/
    // while(ros::ok())
    // {
    //     loop_rate.sleep();
    //     ros::spinOnce(); 
    //     printf("u1:%8.4f ", ultrasonic(1));//前右
    //     printf("u2:%8.4f ", ultrasonic(2));//前左
    //     printf("u3:%8.4f ", ultrasonic(3));
    //     printf("u4:%8.4f ", ultrasonic(4));
    //     printf("u5:%8.4f ", ultrasonic(5));
    //     printf("u6:%8.4f\n", ultrasonic(6));
    // }
    // return 0;
    /*********************************************end***********************************************/

    /*****************************************验证GPS航向角******************************************/
    /*
    double cLat, cLon, cAngle;
    double latMeter, lonMeter, vAngle;
    cLat = cfGpsLat();
    cLon = cfGpsLon();
    cAngle = cfGpsAngle();
    latMeter = latToMeter(cLat, gpsLatLon2WGS84(3157.262664));
    lonMeter = -lonToMeter(cLon, gpsLatLon2WGS84(11205.266910));
    vAngle = vectorAngle(latMeter, lonMeter);
    printf("cAngle:%f, vAngle:%f\n",cAngle, vAngle);
    return 0;
    */
    /*********************************************end***********************************************/

    /********************************标定GPS航向角与手机电子罗盘**************************************/
    
   // gas(1.0);
    //steer(15);
    // double gpsAngleTest, phoneAngleTest;
    // double eAngle, mAngle = 0.0, rms = 0.0;
    // int index = 0;
    // while(ros::ok())
    // {
    //     loop_rate.sleep();
    //     ros::spinOnce();  
       //// printf("carcounter:%d\n",getCarCounter());//打印编码器
        // gpsAngleTest = cfGpsAngle();
        // phoneAngleTest = backCompass();
        // printf("gpsAngle:%f, phoneAngle:%f\n", gpsAngleTest, phoneAngleTest);
        // eAngle = gpsAngleTest - phoneAngleTest;
        // mAngle += eAngle;
        // rms += eAngle*eAngle;
        // index++;
        // if(index > 600) {
        //     gas(0.0);
        //     mAngle = mAngle / index;
        //     rms = rms / index;
        //     rms = sqrt(rms - mAngle*mAngle);
        //     printf("mAngle:%f, rms:%f\n", mAngle, rms);
        //     break;
        // }
    // }
    // return 0;
    
    /**********************************************end*********************************************/

    /***************************************手动模式测试代码*****************************************/
    /*
    vector<double> s = manualPathToMeter(0.0, 1.0, -0.0);
    printf("x = %f, y = %f\n", s[0], s[1]);
    printf("dx = %f, dy = %f\n", latToMeter(0.0, s[0]), lonToMeter(0.0, s[1]));
    return 0;
    */
    /**********************************************end*********************************************/
    
    /***********************************编码器与GPS标定代码*****************************************/
    /*
    delay_1s(1);
    unsigned int carCounterF = getCarCounter();
    unsigned int carCounterB;
    double startLat = cfGpsLat();
    double startLon = cfGpsLon();
    double endLat, endLon;
    double dx, dy;
    double dis;

    printf("start: lat:%lf, lon:%lf, counter: %d\n", startLat, startLon, carCounterF);
    gas(2.0);
    while(ros::ok()) {
        loop_rate.sleep();
        ros::spinOnce();    
        if(getCarCounter() - carCounterF > 12000) {
            gas(0.0);
            brake(600.0);
            delay_1s(3);
            carCounterB = getCarCounter();
            endLat = cfGpsLat();
            endLon = cfGpsLon();
            dx = latToMeter(startLat, endLat); 
            dy = lonToMeter(startLon, endLon);
            dis = sqrt(pow(abs(dx), 2)+pow(abs(dy), 2));
            printf("end: lat:%lf, lon:%lf, counter: %d\n", endLat, endLon, carCounterB);
            printf("end: dx:%lf, dy:%lf, dis: %lf\n", dx, dy, dis);
            printf("end: encode dis:%d\n", carCounterB-carCounterF);
            delay_1s(1);
            brake(0.0);
            delay_1s(1);
            return 0;
        }
    }
    return 0;
    */
    /**********************************************end*********************************************/

    // runTof();
    // printf("run tof OK\n");

    /****************************************cloud登录代码******************************************/
    int ID = 1; //设置小车ID，每个车必须唯一
    int delayTimes = 0; // 延时计数
    // bool lastStart;
    // bool lastStop;
    // bool lastTurn;
    while(!logInCloud(ID)) {    // 登入云平台，若没登上则阻塞，每3s重连一次，直到连上
        loop_rate.sleep();
    }
    printf("ID:%016d 云接入成功\n", ID);
    delay_1s(1);

    /****************************************cloud测试代码******************************************/
	////reachTarget() 到达目的地命令    cannotAvoidObstacles() 不能规避障碍命令  reportCurrentLatLon(ilat,ilon) 报告当前位置
	// while(ros::ok())
	// {
	//     if(cloudPathValid == 1) {   // cloudPathValid为1时表面路径数据已经准备好
	//         path = getPath(0);      // 获取路径数据
	//         int pathSize=path.size()/2;
	//         printf("获取经纬度路径:%d条\n", pathSize);
	//         for (int i = 0; i < path.size();i++) {  // 打印路径数据
	//             cout << path[i] << " ";
	//         }
	//         cout << " " << endl;
	//     }
	//	   if(getStart() == true && getStart() != lastStart) {
	//         printf("开始自动驾驶\n");
	//     } else if(getStop() == true && getStop() != lastStop) {
	//         printf("停止自动驾驶\n");
	//     } else if(getTurn() == true && getTurn() != lastTurn) {
	//         printf("躲避障碍物\n");
	//     }
	//     lastStart = getStart();
	//     lastStop = getStop();
	//     lastTurn = getTurn();
		/**********向云平台发送路径测试代码********************************/
	//     delayTimes++;//
	//     if(delayTimes == 500) {     // 每5s报告当前位置
	//		   ilat = cfGpsLat();
	//		   ilon = cfGpsLon();
	//         reportCurrentLatLon(ilat, ilon);
	//         printf("lat:%f   lon:%f\n", ilat, ilon);
	//		   delayTimes = 0;
	//     }
	//     loop_rate.sleep();
	// }
	// return 0;
	/********************************************end**************************************************/
    delay_1s(1);
    while(ros::ok())
    {
		
		//printf("enter while\n");
	
         //printf("tofObstacle: %d\n",tofObstacle());
        // printf("bieyeobstacle: %lf\n",bieyeObstacle());
        //continue;
        
        //double idistance getDistance(ilat, ilon,)
        // printf("lat:%f   lon:%f\n", ilat, ilon);
        // continue;
        //moveTarget(ilat, ilon, 3156.913886, 11204.859963, igpsangle, 0.5, 2.5, 500, 3);
		// printf("cloudPathValid:%d\n", cloudPathValid);
        // printf("carCounter: %d\n", getCarCounter());
        // 获取路径
        loop_rate.sleep();
		if(manualMode == true && cloudPathValid == 1) {
            path=getPath();
            pathSize=path.size()/2;	
            if(pathSize > 0) {
                path = manualPathToMeter(path[0], path[1], G_steer);
                ilat = 0.0;
                ilon = 0.0;
                igpsangle = 270.0;


                G_dx = latToMeter(ilat, path[0]);               // 小车坐标系
                G_dy = lonToMeter(ilon, path[1]);               // 小车坐标系
                G_angle = gpsAngleToCoordinate(igpsangle);      // 小车坐标系
                G_car.x = 0.0;                                  // carH坐标系
                G_car.y = 0.0;                                  // carH坐标系
                G_car.ang = coorToCarHAngle(G_angle);           // carH坐标系
                G_carCounter = getCarCounter();

                printf("G_dx:%f, G_dy:%f, G_angle:%f, GCar_angle:%f, G_Counter:%d\n", \
                        G_dx, G_dy, G_angle, G_car.ang, G_carCounter);
            }
        } else if(targetIndex>=pathSize && cloudPathValid == 1) { // && cloudPathValid == 1 //本地测试注释掉cloudPathValid
			//if (patho == 0) {
				path = getPath(0);
			// patho只是用于本地测试，获得第一条路径后由0变为1，使本地路径无法重复获得
			//	patho++;
				pathSize = path.size() / 2;
				targetIndex = 0;
			//}
			printf("pathSize = %d\n", pathSize);
		}

		// 检测GPS, getGpsStatus输入1模拟真实GPS，输入0模拟丢失GPS
		getGpsStatus(patho);
		//// 当patho为1时，获取真实GPS，之后再也不会获取真实GPS，以此来模拟惯导
		//patho++;
		// 如果找到GPS，则记录当前经纬度和航向角数据
		if (G_lostGps == false) {
			ilat = cfGpsLat();          // GPS坐标系
			ilon = cfGpsLon();          // GPS坐标系
			igpsangle = cfGpsAngle();   // GPS坐标系

			//每5s发送一次当前位置
			delayTimes++;
			if (delayTimes == 500) {
				reportCurrentLatLon(ilat, ilon);
				printf("报告当前位置  ilat:%f  ilon:%f\n",ilat,ilon);
				//if (tu == 0) {
				//	cannotAvoidObstacles();//发送不能规避障碍
				//	printf("发送不能避障\n");
				//}
				delayTimes = 0;
			}
            // igpsangle = backCompass();
            // 如果路径没有走完，存储所有全局变量
            if(targetIndex < pathSize) {
                G_dx = latToMeter(ilat, path[2*targetIndex]);   // 小车坐标系
                G_dy = lonToMeter(ilon, path[2*targetIndex+1]); // 小车坐标系
                G_angle = gpsAngleToCoordinate(igpsangle);      // 小车坐标系
                G_car.x = 0.0;                                  // carH坐标系
                G_car.y = 0.0;                                  // carH坐标系
                G_car.ang = coorToCarHAngle(G_angle);           // carH坐标系
                G_carCounter = getCarCounter();
            }
            printf("G_dx:%f, G_dy:%f, G_angle:%f, GCar_angle:%f, G_Counter:%d\n", \
                    G_dx, G_dy, G_angle, G_car.ang, G_carCounter);
        }
        /*
        if(patho == 3) {
            break;
        } else {
            continue;
        }
        */
        manualMode = getManualModel();

		//检测云平台的开始信号
		start=getStart();
		
		//检测云平台的停止信号
		stop=getStop();
		
		//检测云平台是否绕障碍
		tu=getTurn();
		printf("start:%d   stop:%d   tu:%d\n", start, stop, tu);
		
		//停止小车
		if (stop == 1) {
			if (pstop == 0) {
				gas(0.0);
				pGas = 0;
				pstart = 0;
				pstop++;
				brake(brakeV);
				//go=0;	
				printf("car stop\n");
			}
			continue;
		}
		//启动小车
		if (pstart == 0 && start == 1) {
			//go=1;
			pstart++;
			pstop = 0;
			brake(0.0);
			printf("car start\n");
		}
		//已走完所有目标点
        // printf("targetIndex= %d\n",targetIndex);
        // printf("pathSize= %d\n",pathSize);
		//if(targetIndex>=pathSize){
  //          gas(0.0);
  //          pGas=0;
  //          brake(brakeV);
  //          delay_1s(3);
  //          printf("car finish\n");
  //          brake(0);
  //          delay_1s(3);
  //          //return 0;
  //          break;
  //          continue;
		//}
		
		/*if(go==0){
			printf("car go = %d\n",go);	
			continue;
		}*/
		
		//到达第targetIndex个目标点
		double dis;
        if(G_lostGps == true) {
            dis = getDistanceInMeter(G_car);
        } else {
            dis = getDistance(ilat, ilon, path[2*targetIndex], path[2*targetIndex+1]);
        }
	    if(dis<minDistance){
			targetIndex++;
			printf("reach target%d\n", targetIndex);
			if (targetIndex >= pathSize) {  //已走完所有目标点
				gas(0.0);
				pGas = 0;
				brake(brakeV);
				delay_1s(3);
				printf("car finish\n");
				brake(0);
				delay_1s(3);
				//return 0;
				break;
				continue;
			}
            else if(G_lostGps == true) { // && targetIndex < pathSize
                G_dx = latToMeter(ilat, path[2*targetIndex]);
                G_dy = lonToMeter(ilon, path[2*targetIndex+1]);
            }	
            gas(0.0);
            pGas = 0;	
		} else {
            //走第targetIndex个目标点
            if(tu){
                if(G_lostGps == true) {
                    moveTargetWithTurnInMeter(G_car, minDistance, gasV*gasRatio+pGas*(1-gasRatio), brakeV, brakeDealyTime,pGas,angleDis);
                } else {
                    moveTargetWithTurn(ilat, ilon, path[2*targetIndex], path[2*targetIndex+1], igpsangle, minDistance, gasV*gasRatio+pGas*(1-gasRatio), brakeV, brakeDealyTime,pGas,angleDis);			
                }
				if (block > 0) {//不能规避障碍
					gas(0.0);
					pGas = 0;
					brake(brakeV);
					delay_1s(brakeDealyTime);
					brake(0.0);
					delay_1s(2);
					break;
				}
            } else {
                if(G_lostGps == true) {
                    moveTargetWithStopInMeter(G_car, minDistance, gasV*gasRatio+pGas*(1-gasRatio), brakeV, brakeDealyTime,pGas,angleDis);
                } else {
                    moveTargetWithStop(ilat, ilon, path[2*targetIndex], path[2*targetIndex+1], igpsangle, minDistance, gasV*gasRatio+pGas*(1-gasRatio), brakeV, brakeDealyTime,pGas,angleDis);			
                }
            }
            pGas=gasV*gasRatio+pGas*(1-gasRatio);
            // printf("dis = %f\n", dis);
            // printf("pGas = %f\n", pGas);
		}
		printf("******************************\n");
	//	printf("dis = %f\n", dis);
		/*pstart=start;
		pstop=stop;*/
        ros::spinOnce();
        // loop_rate.sleep();
    }
    // killTof();
    // pthread_exit(NULL);
    return 0;
}
